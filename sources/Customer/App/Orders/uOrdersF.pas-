unit uOrdersF;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIForm, uniButton, uniBitBtn, uniGUIBaseClasses, uniPanel,
  uniLabel, uniEdit, uCommonType, Vcl.ExtCtrls, uniGroupBox, Math;

type
  TOrderF = class(TUniForm)
    tabCommon: TUniFieldContainer;
    edtDetailNameF: TUniEdit;
    lblWeightKGF: TUniLabel;
    lblVolumeKGF: TUniLabel;
    edtWeightKGF: TUniNumberEdit;
    edtVolumeKGF: TUniNumberEdit;
    lblDetailNameF: TUniLabel;
    btnCancel: TUniBitBtn;
    btnOk: TUniBitBtn;
    UniGroupBox1: TUniGroupBox;
    edtL: TUniNumberEdit;
    edtW: TUniNumberEdit;
    edtH: TUniNumberEdit;
    edtVKG: TUniNumberEdit;
    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure UniFormShow(Sender: TObject);
    procedure edtLChange(Sender: TObject);
  private
    FAction: TFormAction;
    FID: Integer;
    procedure SetAction(const Value: TFormAction);
    /// <summary>
    ///  DataLoad - получение данных с сервера, для отображения на форме
    ///</summary>
    procedure DataLoad();

    /// <summary>
    ///  DataCheck - проверка заполнения обязательных полей
    ///</summary>
    procedure DataCheck();

//    procedure SetTaskTypeProperty();
//    procedure SetPeriodTypeProperty();
  public
    { Public declarations }
    { Public declarations }
    property FormAction: TFormAction read FAction write SetAction;
    property ID: Integer read FID write FID;
  end;

function OrderF: TOrderF;

implementation

{$R *.dfm}

uses
  MainModule, uniGUIApplication, uSqlUtils, uMainVar;

function OrderF: TOrderF;
begin
  Result := TOrderF(UniMainModule.GetFormInstance(TOrderF));
end;

{ TOrderF }

procedure TOrderF.btnCancelClick(Sender: TObject);
begin
  ModalResult:=mrCancel;
end;

procedure TOrderF.btnOkClick(Sender: TObject);
 var sqltext: string;
     Field:string;
begin
  DataCheck();

  if RetVal.Code = 0 then
  begin

   case FAction of
    acUpdate:
    begin
      sqltext :=' declare @R      int                  '+
                '                                      '+
                ' exec @r = OrderUpdate                '+
                '             @OrderID      = :OrderID      '+
                '            ,@DetailNameF  = :DetailNameF  '+
                '            ,@WeightKGF    = :WeightKGF    '+
                '            ,@VolumeKGF    = :VolumeKGF    '+
                '                                     '+
                ' select @r as retcode '+
                ' ';

      Sql.Open(sqltext,
               ['WeightKGF','VolumeKGF','DetailNameF', 'OrderID'],
               [edtWeightKGF.Value,
                edtVolumeKGF.Value,
                edtDetailNameF.Text,
                FID
                ]);

      RetVal.Code := Sql.Q.FieldByName('retcode').Value;
    end;
   end;
  end;

  if RetVal.Code = 0 then
  begin
    ModalResult:=mrOK;
  end
  else
  begin
    MessageDlg(RetVal.Message, mtError, [mbOK]);
  end;
end;

procedure TOrderF.DataCheck;
begin
  RetVal.Clear;

//  case FAction of
//    acInsert, acReportCreate, acUpdate, acReportEdit:
//    begin
//      if edtBrief.IsBlank then
//      begin
//        RetVal.Code := 1;
//        RetVal.Message := 'Поле [Сокращение] обязательна к заполнению!'; Exit();
//      end
//    end;
//  end;
end;

procedure TOrderF.DataLoad;
begin
  UniMainModule.Query.Close;
  UniMainModule.Query.SQL.Text := ' select isnull(WeightKGF, WeightKG)     as WeightKGF,  '+
                                  '        isnull(VolumeKGF, VolumeKG)     as VolumeKGF,  ' +
                                  '        isnull(DetailNameF, DetailName) as DetailNameF '+
                                  '       ,Manufacturer,DetailNumber ' +
                                  '   from vOrders'+
                                  '  where OrderID = :OrderID '+
                                  ' ';
  UniMainModule.Query.ParamByName('OrderID').Value := FID;
  UniMainModule.Query.Open;

  edtWeightKGF.Text  := UniMainModule.Query.FieldByName('WeightKGF').AsString;   //Вес Физический факт
  edtVolumeKGF.Text  := UniMainModule.Query.FieldByName('VolumeKGF').AsString;   //Вес Объемный факт
  edtDetailNameF.text:= UniMainModule.Query.FieldByName('DetailNameF').AsString; //Вес Объемный факт
end;

procedure TOrderF.edtLChange(Sender: TObject);
begin
  edtVKG.Value := ( (edtL.Value * edtW.Value * edtH.Value) / 5000 );
end;

procedure TOrderF.SetAction(const Value: TFormAction);
begin
  FAction := Value;
end;

procedure TOrderF.UniFormShow(Sender: TObject);
begin
  case FAction of
    acInsert, acReportCreate:
    begin
      btnOk.Caption := ' Добавить';
    end;
    acUpdate, acReportEdit, acUserAction:
    begin
      btnOk.Caption := ' Сохранить';

    end;
    acDelete:
      btnOk.Caption := ' Удалить';
    acShow:
      btnOk.Caption := ' Закрыть';
  else
    btnOk.Caption := ' Выполнить';
  end;

  // начитываем данные с базы
  case FAction of
    acUpdate, acReportEdit, acUserAction, acDelete, acShow:
    begin
      DataLoad;
      Self.Caption:= 'Изменение детали ' +
      UniMainModule.Query.FieldByName('Manufacturer').AsString + ' ' +
      UniMainModule.Query.FieldByName('DetailNumber').AsString;

      edtWeightKGF.SetFocus;
    end
  else
    //
  end;
end;

end.
